"use client";
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import { HomeBanner } from "../components/Banners/HomeBanner";
import StarSelector from "../components/domains/home/StarSelector";
import GenereSelector from "../components/domains/home/GenereSelector";
import StatusSelector from "../components/domains/home/StatusSelector";
import { Text } from "../components/Typography";
import { PrimaryButton } from "../components/Button/PrimaryButton";
import { GET_HERO_SECTION_ANIMES } from "@/lib/queries";
import { useQuery } from "@apollo/client";
import { shuffle } from "lodash";
import { SkeletonRectangle } from "../components/SkeletonRectangle";
import { useAtom } from "jotai";
import { filtersStateAtom } from "@/app/states/filters-state";
import { useFilteredAnimes } from "@/hooks/useFiltersAnimes";
import { Anime } from "@/lib/types";
import { toast, Toaster } from "sonner";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function MainLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const { loading, data, error } = useQuery(GET_HERO_SECTION_ANIMES);

  const getHeroAnimes = () => {
    return loading
      ? []
      : data
      ? shuffle(
          data.Page.media.filter(
            (anime: Anime) =>
              anime.bannerImage != null && anime.description.length
          )
        ).slice(0, 3)
      : [];
  };

  return (
    <div className="antialiased h-full flex flex-col bg-gray-100 relative">
      <div className="min-h-96 -mt-16">
        <HomeBanner animes={getHeroAnimes()} isLoading={loading} />
      </div>
      {error &&
        toast.error("Ups, something went wrong", {
          description:
            "It appears that the server is down, please try again later",
          action: {
            label: "Close",
            onClick: () => console.log("Closd error notification"),
          },
        })}

      <Toaster position="top-center" richColors />

      <div className="flex-grow">
        <div className="grid grid-cols-[1.2fr_6fr] h-full bg-yellow-300">
          <Sidebar />
          <main className="bg-black w-full overflow-x-hidden ">{children}</main>
        </div>
      </div>
    </div>
  );
}

function Sidebar() {
  const [filters, setFilters] = useAtom(filtersStateAtom);

  const { hasFiltersApplied, resetFilters } = useFilteredAnimes({});

  return (
    <aside className="bg-black w-full h-full flex flex-col pt-3 px-3 gap-3">
      <section className=" flex flex-col pt-3 px-3 gap-3">
        <div className="flex justify-between items-center mb-5">
          <Text.Bold size="xl" className="pb-2 text-center text-yellow-400">
            Filters
          </Text.Bold>

          {hasFiltersApplied && (
            <button className="scale-75" onClick={resetFilters}>
              <Text.Semibold className="underline">Reset Filters</Text.Semibold>
            </button>
          )}
        </div>

        <StarSelector
          onSelectStar={(value) => {
            setFilters((prev) => ({ ...prev, rating: value }));
          }}
        />

        <GenereSelector />

        <StatusSelector />
      </section>
    </aside>
  );
}
